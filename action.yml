name: "Next Version"
description: "Realiza el release basado en los commits y conventional commit"
inputs:
  github_token:
    description: Github Token
    required: true
  branches:
    description: Branches to release
    required: false
    default: '["main"]'
  only_version:
    description: Only version
    required: false
    default: 'true'
  # todos no son requeridos para habilitar una integraciÃ³n progresiva
  jira_project_id:
    description: Jira Project Id (e.g. "PE20"). This will be used as prefix in tickets
    required: false
  jira_api_token:
    description: Jira API Token
    required: false
  jira_email:
    description: Jira Email
    required: false
  jira_host_url:
    description: Jira Host URL
    required: false
    default: "https://andreani.atlassian.net"
  # generado con la informaciÃ³n de los inputs
  jira_release_template:
    description: "Title of the release name template. This will be used in name of publication in JIRA"
    required: false
    default: "Test v${version}"


# echo 'module.exports = { plugins: ["@semantic-release/commit-analyzer", "@semantic-release/release-notes-generator", "@semantic-release/github", [ "@semantic-release/exec", { verifyReleaseCmd: "./version.sh ${nextRelease.version} ${lastRelease.version}" } ], ["@architecture-it/semantic-release-jira", { "projectId": "${{ inputs.project_id }}", "releaseNameTemplate": "${{ inputs.release_template }}", "jiraHost": "${{ inputs.host_url }}", "ticketPrefixes": [ "${{ inputs.ticket_prefix }}" ], released: true, setReleaseDate: true }] ], branches: ${{ inputs.branches }}, dryRun: ${{ inputs.only_version == 'true' }} };' >> release.config.cjs
# name: ðŸ“‘Jira integration
#         uses: architecture-it/actions@next-version-test-jira
#         with:
#           github_token: ${{ secrets.ARQUITECTURA_DEPLOY }}
#           jira_email: ${{ secrets.JIRA_EMAIL }}
#           jira_project_id: "PE20"
#           ticket_prefix: "PE20"
#           jira_api_token: ${{ secrets.JIRA_API_TOKEN }}

# {
#   "plugins": [
#     "@semantic-release/commit-analyzer",
#     "@semantic-release/release-notes-generator",
#     "@semantic-release/git",
#     ["@architecture-it/semantic-release-jira", {
#       "projectId": "UH",
#       "releaseNameTemplate": "Test v${version}",
#       "jiraHost": "uphabit.atlassian.net",
#       "ticketPrefixes": [ "TEST", "UH"],
#       "ticketRegex": "[a-zA-Z]{3,5}-\\d{3,5}"
#     }]
#   ]
# }

# echo 'module.exports = { plugins: ["@semantic-release/commit-analyzer", "@semantic-release/release-notes-generator", "@semantic-release/github", [ "@semantic-release/exec", { verifyReleaseCmd: "./version.sh ${nextRelease.version} ${lastRelease.version}" } ] ], branches: ${{ inputs.branches }}, dryRun: ${{ inputs.only_version == 'true' }} };' >> release.config.js

outputs:
  new-version:
    description: The version of the release
    value: ${{ steps.next-version.outputs.newVersion }}
  previous-version:
    description: The previous version of the release
    value: ${{ steps.next-version.outputs.previousVersion }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    - name: Generate .npmrc file
      uses: architecture-it/actions@generate-npmrc
      with:
        npm_token: ${{ secrets.ARQUITECTURA_DEPLOY }}
        font_awesome_key: ${{ secrets.NPM_FONTAWESOME_KEY }}
    - name: Write bash script
      shell: bash
      run: |
        echo '#!/bin/bash' >> version.sh
        echo 'echo "newVersion=$1" >> $GITHUB_OUTPUT' >> version.sh
        echo 'echo "previousVersion=$2" >> $GITHUB_OUTPUT' >> version.sh
        chmod +x version.sh
    - name: Write config file
      shell: bash
      run: |
        echo 'module.exports = { plugins: ["@semantic-release/commit-analyzer", "@semantic-release/release-notes-generator", "@semantic-release/github", [ "@semantic-release/exec", { verifyReleaseCmd: "./version.sh ${nextRelease.version} ${lastRelease.version}" } ], ["@architecture-it/semantic-release-jira", { "projectId": "${{ inputs.jira_project_id }}", "releaseNameTemplate": "${{ inputs.jira_release_template }}", "jiraHost": "${{ inputs.jira_host_url }}", "ticketPrefixes": [ "${{ inputs.jira_project_id }}" ], released: ${{ inputs.only_version != 'true' }}, setReleaseDate: ${{ inputs.only_version != 'true' }} }] ], branches: ${{ inputs.branches }}, dryRun: ${{ inputs.only_version == 'true' }} };' >> release.config.cjs
    - name: Get the version
      run: npx --no-install -y -p @semantic-release/exec -p @semantic-release/git -p @semantic-release/github -c semantic-release
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GH_TOKEN: ${{ inputs.github_token }}
        JIRA_EMAIL: ${{ inputs.jira_email }}
        JIRA_API_TOKEN: ${{ inputs.jira_api_token }}
      id: next-version
      shell: bash
