name: "React Prepare"
description: "Realiza la configuración necesaria e install de las dependencias(npm, yarn, pnpm)"

inputs:
  matrix_version:
    description: "matrix de pruebas node"
    required: true
  fontawesome_token: 
    description: "token de fontawesome"
    required: false
    default: ''
  packages_token:
    description: "token github para autenticarse en packages"
    required: false
    default: ''
  cache:
    description: "Cache for node_modules"
    required: false
    default: 'true'
  pnpm_version:
    description: "version de pnpm"
    required: false
    default: '9'


runs:
  using: "composite"
  steps:
    - name: Get package manager and install command
      run: |
        if [ -f "yarn.lock" ]; then 
          echo "name=yarn" >> $GITHUB_OUTPUT 
          echo "command=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT 
          echo "lock_file=yarn.lock" >> $GITHUB_OUTPUT
        elif [ -f "package-lock.json" ]; then 
          echo "name=npm" >> $GITHUB_OUTPUT 
          echo "command=npm ci --no-progress --loglevel error" >> $GITHUB_OUTPUT 
          echo "lock_file=package-lock.json" >> $GITHUB_OUTPUT
        elif [ -f pnpm-lock.yaml ]; then 
          echo "name=pnpm" >> $GITHUB_OUTPUT 
          echo "command=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT 
          echo "lock_file=pnpm-lock.yaml" >> $GITHUB_OUTPUT
        else 
          echo "name=notfound" >> $GITHUB_OUTPUT
        fi
      id: package_manager
      shell: bash
    - name: validate 'Lockfile'
      if: ${{ steps.package_manager.outputs.name == 'notfound' }}
      run: |
        echo "El código debe contener algún archivo de lockfile ('package-lock.json', 'yarn.lock' o 'pnpm-lock.yaml')."
        echo "Asegurate de subirlo."
        echo "ERROR: Falta archivo lockfile. Ver más en https://architecture-it.github.io/docs/Platform/Front/#manejo-de-dependencias"
        exit 1
      shell: bash    
    - name: Generate .npmrc file
      uses: architecture-it/actions@generate-npmrc
      with:
        npm_token: ${{ inputs.packages_token }}
        font_awesome_key: ${{ inputs.fontawesome_token }}
    - name: Use pnpm Setup
      if: ${{ steps.package_manager.outputs.name == 'pnpm' }}
      uses: pnpm/action-setup@v2
      with:
        version: ${{ inputs.pnpm_version }}
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.matrix_version }}
        cache: ${{ steps.package_manager.outputs.name }}

    - name: 'Cache Node Modules Dependencies'
      uses: actions/cache@v3
      id: cache-node-modules
      with:
        path: 'node_modules'
        # key depends on package manager
        key: deps-node-modules-${{ hashFiles(format('**/{0}', steps.package_manager.outputs.lock_file)) }}        
        restore-keys: |
          deps-node-modules-${{ hashFiles(format('**/{0}', steps.package_manager.outputs.lock_file)) }}
      if: inputs.cache == 'true'
    
    - name: Install dependencies
      run: ${{ steps.package_manager.outputs.command }}
      shell: bash
      if: inputs.cache == 'false' || steps.cache-node-modules.outputs.cache-hit != 'true'
