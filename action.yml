name: "Next Version"
description: "Realiza el release basado en los commits y conventional commit"
inputs:
  github_token:
    description: Github Token
    required: true
  branches:
    description: Branches to release
    required: false
    default: '["main"]'

outputs:
  new-version:
    description: The version of the release
    value: ${{ steps.next-version.outputs.newVersion }}
  previous-version:
    description: The previous version of the release
    value: ${{ steps.next-version.outputs.previousVersion }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
    - name: Install dependencies temporary for npm
      run: npm i --no-save @semantic-release/exec @semantic-release/git @semantic-release/github
      shell: bash
    - name: Write bash script
      shell: bash
      run: |
        echo '#!/bin/bash' >> version.sh
        echo 'echo "newVersion=$1" >> $GITHUB_OUTPUT' >> version.sh
        echo 'echo "previousVersion=$2" >> $GITHUB_OUTPUT' >> version.sh
        chmod +x version.sh
    - name: Write config file
      shell: bash
      run: |
        echo 'module.exports = { plugins: ["@semantic-release/commit-analyzer", [ "@semantic-release/exec", { verifyReleaseCmd: "./version.sh ${nextRelease.version} ${lastRelease.version}" } ] ], branches: ${{ inputs.branches }}, dryRun: true };' >> release.config.js
    - name: Get the version
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GH_TOKEN: ${{ inputs.github_token }}
      id: next-version
      shell: bash
    - name: show version
      run: |
        echo "The new version is '${{ steps.next-version.outputs.newVersion }}'"
        echo "The previous version is '${{ steps.next-version.outputs.previousVersion }}'"
      shell: bash
