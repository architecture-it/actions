name: 'Validate Status Project (SonarQ)'
description: 'Unique step to Validate Status Project (SonarQ)'
inputs:
  sonar_url:
    description: "Url SonarQube"
    required: true
  sonar_token:
    description: "Token de acceso SonarQube"
    required: true
  projectKey:
    description: "Project Key SonarQube"
    required: false
    default: ""
  branch:
    description: "Branch SonarQube"
    required: false
    default: "main"


# sonar_url: ${{ secrets.SONAR_HOST_URL }}
#           sonar_token: ${{ secrets.SONAR_TOKEN }}
#           projectKey: architecture-it_stylesystem
#           branch: "main"

# curl -X POST -u ${{ inputs.sonar_token }}: '${{ inputs.sonar_url }}/api/project_tags/set' -d tags='${{ inputs.sonar_code }}, github, ${{ inputs.tags }}' -d project=${{ env.KEY_REPOSITORY }}

runs:
  using: "composite"
  steps:
    - name: Validate
      shell: bash
      run: |
        curl -X GET -u ${{ inputs.sonar_token }}: '${{ inputs.sonar_url }}/api/qualitygates/project_status?projectKey=${{ inputs.projectKey }}&branch=${{ inputs.branch }}' | jq '.projectStatus.status' |
        if [[ $1 != '"OK"' ]]; then
          echo "SonarQube Quality Gate failed for Project '${{ inputs.projectKey }}' in branch '${{ inputs.branch }}'. Project Status: " $1
          exit 1
        fi
    # - uses: actions/github-script@v7
    #   id: validate-sonar
    #   with:     
    #     script: |
    #       const name = context.repo.repo;
    #       const organization = context.repo.owner;

    #       const projectKey = '${{ inputs.projectKey }}' || `${organization}_${name}`;
    #       const branch = core.getInput('branch');
          
    #       const url = `${{ inputs.sonar_url }}/api/qualitygates/project_status`;
    #       const params = new URLSearchParams({
    #         branch: branch,
    #         projectKey: projectKey,
    #       });

    #       const response = await fetch(`${url}?${params}`, {
    #           method: 'GET',
    #           headers: {
    #             'Authorization': 'Basic ' + Buffer.from(`${{ inputs.sonar_token }}:`).toString('base64'),
    #           },
    #       });

    #       //Returns an HTTP code 404 if the analysis associated with the task is not found or does not exist.
    #       if (response.status === 404) {
    #         core.setFailed(`The analysis associated with the Project: '${projectKey}' is not found or does not exist`);
    #       }

    #       const responseSonar = await response.json();

    #       const { projectStatus } = responseSonar;

    #       if (projectStatus.status !== 'OK') {
    #         core.setFailed(`SonarQube Quality Gate failed. Project Status: ${projectStatus.status}`);
    #         core.debug(JSON.stringify(responseSonar));
    #       }


