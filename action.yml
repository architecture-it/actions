name: "Generate a Jira Version"
description: "Generate a Jira Version from PR that follows the conventional commit and Pull Request information"
inputs:
  github_token:
    description: "The GitHub token"
    required: true
  project_id:
    description: "The Jira project id"
    required: true
  ticket_prefix:
    description: "The ticket prefix"
    required: true
  host_url:
    description: "The Jira host url"
    required: false
    default: "https://andreani.atlassian.net"
  release_template:
    description: "The release name template"
    required: false
    default: "Test v${version}"
  branches:
    description: Branches to release
    required: false
    default: '["main"]'
  only_version:
    description: Only version
    required: false
    default: 'false'
  jira_email:
    description: Jira email of service account
    required: true
  jira_api_token:
    description: Jira api token of service account
    required: true

outputs:
  new-version:
    description: The version of the release
    value: ${{ steps.next-version.outputs.newVersion }}
  previous-version:
    description: The previous version of the release
    value: ${{ steps.next-version.outputs.previousVersion }}

runs:
  using: "composite"
  steps:
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    - name: Add npm config
      uses: architecture-it/actions@generate-npmrc
      with:
        npm_token: ${{ inputs.github_token }}
    - name: Write config file
      shell: bash
      run: |
        echo 'module.exports = { plugins: ["@semantic-release/commit-analyzer", "@semantic-release/release-notes-generator", "@semantic-release/github", [ "@semantic-release/exec", { verifyReleaseCmd: "./version.sh ${nextRelease.version} ${lastRelease.version}" } ], ["@architecture-it/semantic-release-jira", { "projectId": "${{ inputs.project_id }}", "releaseNameTemplate": "${{ inputs.release_template }}", "jiraHost": "${{ inputs.host_url }}", "ticketPrefixes": [ "${{ inputs.ticket_prefix }}" ], released: true, setReleaseDate: true }] ], branches: ${{ inputs.branches }}, dryRun: ${{ inputs.only_version == 'true' }} };' >> release.config.cjs
    - name: Get the version
      run: npx --no-install -y -p @semantic-release/exec -p @semantic-release/git -p @semantic-release/github -p @architecture-it/semantic-release-jira -c semantic-release
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GH_TOKEN: ${{ inputs.github_token }}
        JIRA_EMAIL: ${{ inputs.jira_email }}
        JIRA_API_TOKEN: ${{ inputs.jira_api_token }}
      id: next-version
      shell: bash
