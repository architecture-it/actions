name: "React CI"
description: "Realiza el lint, build, test and coverage"
inputs:
  matrix_version:
    description: "matrix de pruebas node"
    required: true
  fontawesome_token: 
    description: "token de fontawesome"
    required: false
    default: ''
  packages_token:
    description: "token github para autenticarse en packages"
    required: false
    default: ''
  skip_test:
    description: "permite skipear los procesos de testing"
    required: false
    default: 'false' 
  ci:
    description: "Esta variable forza el chequeo del linter y en caso de fallas rompe el flujo"
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Get package manager and install command
      run: |
        if [ -f "yarn.lock" ]; then 
          echo "name=yarn" >> $GITHUB_OUTPUT 
          echo "command=yarn --frozen-lockfile" >> $GITHUB_OUTPUT 
        elif [ -f "package-lock.json" ]; then 
          echo "name=npm" >> $GITHUB_OUTPUT 
          echo "command=npm ci --no-progress --loglevel error" >> $GITHUB_OUTPUT 
        elif [ -f pnpm-lock.yaml ]; then 
          echo "name=pnpm" >> $GITHUB_OUTPUT 
          echo "command=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT 
        else 
          echo "name=notfound" >> $GITHUB_OUTPUT
        fi
      id: package_manager
      shell: bash
    - name: validate 'Lockfile'
      if: ${{ steps.package_manager.outputs.name == 'notfound' }}
      run: |
        echo "El código debe contener algún archivo de lockfile ('package-lock.json', 'yarn.lock' o 'pnpm-lock.yaml')."
        echo "Asegurate de subirlo."
        echo "ERROR: Falta archivo lockfile. Ver más en https://architecture-it.github.io/docs/Platform/Front/#manejo-de-dependencias"
        exit 1
      shell: bash    
      # Use default with cache
    - name: Use pnpm Setup
      uses: pnpm/action-setup@v2
      with:
        version: 8
      if: ${{ steps.package_manager.outputs.name == 'pnpm' }}
    - name: Use Node.js ${{ inputs.matrix_version }} - Cache ${{ steps.package_manager.outputs.name }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: ${{ steps.package_manager.outputs.name }}
    - name: Generate .npmrc file
      uses: architecture-it/actions@generate-npmrc
      with:
        npm_token: ${{ inputs.packages_token }}
        font_awesome_key: ${{ inputs.fontawesome_token }}
      if: ${{ inputs.packages_token != '' }}
    - name: Install dependencies
      run: ${{ steps.package_manager.outputs.command }}
      shell: bash
    - name: Has lint script
      run: echo "result=[[ $(cat package.json| jq .scripts.lint) != null ]]" >> $GITHUB_OUTPUT
      shell: bash
      id: has-lint-script
    - name: Lint
      run: ${{ steps.package_manager.outputs.name }} run lint
      shell: bash
      if: ${{ steps.has-lint-script.outputs.result }}
    - name: Build
      run: ${{ steps.package_manager.outputs.name }} run build
      shell: bash
      env:
        CI: ${{ inputs.ci == 'true' }}
    - name: Get tests flags
      run: |
        if [ -f package.json ]; then
          if grep -q vitest package.json; then
            echo "tests_flags=" >> $GITHUB_OUTPUT
          else
            echo "tests_flags=--json --runInBand --testLocationInResults --outputFile=report.json" >> $GITHUB_OUTPUT
          fi
        fi
      id: flags
      shell: bash
    - name: Unit tests
      run: ${{ steps.package_manager.outputs.name }} run test -- --coverage ${{ steps.flags.outputs.tests_flags }}
      shell: bash
      env:
        CI: ${{ inputs.ci == 'true' }}
      if: ${{ inputs.skip_test != 'true' }}
    - name: Archive code coverage results
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: coverage
      if: ${{ inputs.skip_test != 'true' }}
